<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkController</name>
    </assembly>
    <members>
        <member name="M:NetworkUtil.Networking.StartServer(System.Action{SocketState},System.Int32)">
            <summary>
            Starts a TcpListener on the specified port and starts an event-loop to accept new clients.
            The event-loop is started with BeginAcceptSocket and uses AcceptNewClient as the callback.
            AcceptNewClient will continue the event-loop.
            </summary>
            <param name="toCall">The method to call when a new connection is made</param>
            <param name="port">The the port to listen on</param>
        </member>
        <member name="M:NetworkUtil.Networking.AcceptNewClient(System.IAsyncResult)">
             <summary>
             To be used as the callback for accepting a new client that was initiated by StartServer, and 
             continues an event-loop to accept additional clients.
            
             Uses EndAcceptSocket to finalize the connection and create a new SocketState. The SocketState's
             OnNetworkAction should be set to the delegate that was passed to StartServer.
             Then invokes the OnNetworkAction delegate with the new SocketState so the user can take action. 
             
             If anything goes wrong during the connection process (such as the server being stopped externally), 
             the OnNetworkAction delegate should be invoked with a new SocketState with its ErrorOccured flag set to true 
             and an appropriate message placed in its ErrorMessage field. The event-loop should not continue if
             an error occurs.
            
             If an error does not occur, after invoking OnNetworkAction with the new SocketState, an event-loop to accept 
             new clients should be continued by calling BeginAcceptSocket again with this method as the callback.
             </summary>
             <param name="ar">The object asynchronously passed via BeginAcceptSocket. It must contain a tuple with 
             1) a delegate so the user can take action (a SocketState Action), and 2) the TcpListener</param>
        </member>
        <member name="M:NetworkUtil.Networking.StopServer(System.Net.Sockets.TcpListener)">
            <summary>
            Stops the given TcpListener.
            </summary>
        </member>
        <member name="M:NetworkUtil.Networking.ConnectToServer(System.Action{SocketState},System.String,System.Int32)">
             <summary>
             Begins the asynchronous process of connecting to a server via BeginConnect, 
             and using ConnectedCallback as the method to finalize the connection once it's made.
             
             If anything goes wrong during the connection process, toCall should be invoked 
             with a new SocketState with its ErrorOccured flag set to true and an appropriate message 
             placed in its ErrorMessage field. Between this method and ConnectedCallback, toCall should 
             only be invoked once on error.
            
             This connection process should timeout and produce an error (as discussed above) 
             if a connection can't be established within 3 seconds of starting BeginConnect.
             
             </summary>
             <param name="toCall">The action to take once the connection is open or an error occurs</param>
             <param name="hostName">The server to connect to</param>
             <param name="port">The port on which the server is listening</param>
        </member>
        <member name="M:NetworkUtil.Networking.ConnectedCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a connection process that was initiated by ConnectToServer.
            
             Uses EndConnect to finalize the connection.
             
             As stated in the ConnectToServer documentation, if an error occurs during the connection process,
             either this method or ConnectToServer (not both) should indicate the error appropriately.
             
             If a connection is successfully established, invokes the toCall Action that was provided to ConnectToServer (above)
             with a new SocketState representing the new connection.
             
             </summary>
             <param name="ar">The object asynchronously passed via BeginConnect</param>
        </member>
        <member name="M:NetworkUtil.Networking.GetData(SocketState)">
            <summary>
            Begins the asynchronous process of receiving data via BeginReceive, using ReceiveCallback 
            as the callback to finalize the receive and store data once it has arrived.
            The object passed to ReceiveCallback via the AsyncResult should be the SocketState.
            
            If anything goes wrong during the receive process, the SocketState's ErrorOccured flag should 
            be set to true, and an appropriate message placed in ErrorMessage, then the SocketState's
            OnNetworkAction should be invoked. Between this method and ReceiveCallback, OnNetworkAction should only be 
            invoked once on error.
            
            </summary>
            <param name="state">The SocketState to begin receiving</param>
        </member>
        <member name="M:NetworkUtil.Networking.ReceiveCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a receive operation that was initiated by GetData.
             
             Uses EndReceive to finalize the receive.
            
             As stated in the GetData documentation, if an error occurs during the receive process,
             either this method or GetData (not both) should indicate the error appropriately.
             
             If data is successfully received:
              (1) Read the characters as UTF8 and put them in the SocketState's unprocessed data buffer (its string builder).
                  This must be done in a thread-safe manner with respect to the SocketState methods that access or modify its 
                  string builder.
              (2) Call the saved delegate (OnNetworkAction) allowing the user to deal with this data.
             </summary>
             <param name="ar"> 
             This contains the SocketState that is stored with the callback when the initial BeginReceive is called.
             </param>
        </member>
        <member name="M:NetworkUtil.Networking.Send(System.Net.Sockets.Socket,System.String)">
            <summary>
            Begin the asynchronous process of sending data via BeginSend, using SendCallback to finalize the send process.
            
            If the socket is closed, does not attempt to send.
            
            If a send fails for any reason, this method ensures that the Socket is closed before returning.
            </summary>
            <param name="socket">The socket on which to send the data</param>
            <param name="data">The string to send</param>
            <returns>True if the send process was started, false if an error occurs or the socket is already closed</returns>
        </member>
        <member name="M:NetworkUtil.Networking.SendCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a send operation that was initiated by Send.
            
             Uses EndSend to finalize the send.
             
             This method must not throw, even if an error occured during the Send operation.
             </summary>
             <param name="ar">
             This is the Socket (not SocketState) that is stored with the callback when
             the initial BeginSend is called.
             </param>
        </member>
        <member name="M:NetworkUtil.Networking.SendAndClose(System.Net.Sockets.Socket,System.String)">
            <summary>
            Begin the asynchronous process of sending data via BeginSend, using SendAndCloseCallback to finalize the send process.
            This variant closes the socket in the callback once complete. This is useful for HTTP servers.
            
            If the socket is closed, does not attempt to send.
            
            If a send fails for any reason, this method ensures that the Socket is closed before returning.
            </summary>
            <param name="socket">The socket on which to send the data</param>
            <param name="data">The string to send</param>
            <returns>True if the send process was started, false if an error occurs or the socket is already closed</returns>
        </member>
        <member name="M:NetworkUtil.Networking.SendAndCloseCallback(System.IAsyncResult)">
             <summary>
             To be used as the callback for finalizing a send operation that was initiated by SendAndClose.
            
             Uses EndSend to finalize the send, then closes the socket.
             
             This method must not throw, even if an error occured during the Send operation.
             
             This method ensures that the socket is closed before returning.
             </summary>
             <param name="ar">
             This is the Socket (not SocketState) that is stored with the callback when
             the initial BeginSend is called.
             </param>
        </member>
        <member name="T:SocketState">
            <summary>
            A SocketState is a class for representing one network connection 
            and all its related state
            </summary>
        </member>
        <member name="P:SocketState.ErrorMessage">
            <summary>
            A message indicating the nature of an error, if one occured
            </summary>
        </member>
        <member name="P:SocketState.ErrorOccured">
            <summary>
            If an error occurs during a network operation, this flag must
            be set to true before invoking the user's OnNetworkAction delegate.
            The user of the SocketState should check this flag in their
            OnNetworkAction delegates.
            </summary>
        </member>
        <member name="F:SocketState.ID">
            <summary>
            An identifier associated with the connection
            </summary>
        </member>
        <member name="F:SocketState.OnNetworkAction">
            <summary>
            Function to call when data is received or when a connection is made.
            The OnNetworkAction function allows the same network code to be utilized
            by a chain of handling methods. For example, there may be a main
            gameplay data handling routine, but you may want to have a different
            initial handshake routine. By swapping out this function, you
            don't have to change the network code
            </summary>
        </member>
        <member name="M:SocketState.#ctor(System.Action{SocketState},System.Net.Sockets.Socket)">
            <summary>
            Simple constructor
            </summary>
            <param name="toCall">The action to take when network activity occurs</param>
            <param name="s">The socket</param>
        </member>
        <member name="M:SocketState.GetData">
            <summary>
            Returns the unprocessed data the SocketState has received so far, in a thread-safe manner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SocketState.RemoveData(System.Int32,System.Int32)">
            <summary>
            Removes data from the SocketState's unprocessed data buffer in a thread-safe manner.
            Call this after processing data in your OnNetworkAction methods.
            </summary>
            <param name="start">The index of the first character to remove</param>
            <param name="length">The length of the string to remove, starting at "start"</param>
        </member>
        <member name="M:SocketState.ClearData">
            <summary>
            Removes all data from the SocketState's unprocessed data buffer in a thread-safe manner.
            </summary>
        </member>
    </members>
</doc>
